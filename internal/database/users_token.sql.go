// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users_token.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUserRefreshToken = `-- name: CreateUserRefreshToken :one
INSERT INTO users_token (id, created_at, access_token_expires_at, refresh_token, refresh_token_expires_at, user_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id
`

type CreateUserRefreshTokenParams struct {
	ID                    uuid.UUID
	CreatedAt             time.Time
	AccessTokenExpiresAt  time.Time
	RefreshToken          string
	RefreshTokenExpiresAt time.Time
	UserID                uuid.UUID
}

func (q *Queries) CreateUserRefreshToken(ctx context.Context, arg CreateUserRefreshTokenParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createUserRefreshToken,
		arg.ID,
		arg.CreatedAt,
		arg.AccessTokenExpiresAt,
		arg.RefreshToken,
		arg.RefreshTokenExpiresAt,
		arg.UserID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getRefreshTokenByUserID = `-- name: GetRefreshTokenByUserID :one

SELECT id, created_at, access_token_expires_at, refresh_token, refresh_token_expires_at, user_id FROM users_token WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetRefreshTokenByUserID(ctx context.Context, userID uuid.UUID) (UsersToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenByUserID, userID)
	var i UsersToken
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.AccessTokenExpiresAt,
		&i.RefreshToken,
		&i.RefreshTokenExpiresAt,
		&i.UserID,
	)
	return i, err
}

const getUserByRefreshToken = `-- name: GetUserByRefreshToken :one

SELECT id, created_at, access_token_expires_at, refresh_token, refresh_token_expires_at, user_id FROM users_token WHERE refresh_token = $1 
LIMIT 1
`

func (q *Queries) GetUserByRefreshToken(ctx context.Context, refreshToken string) (UsersToken, error) {
	row := q.db.QueryRowContext(ctx, getUserByRefreshToken, refreshToken)
	var i UsersToken
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.AccessTokenExpiresAt,
		&i.RefreshToken,
		&i.RefreshTokenExpiresAt,
		&i.UserID,
	)
	return i, err
}

const updateUserRefreshToken = `-- name: UpdateUserRefreshToken :one

UPDATE users_token
SET refresh_token = $1, refresh_token_expires_at = $2
WHERE user_id = $3
RETURNING id, refresh_token
`

type UpdateUserRefreshTokenParams struct {
	RefreshToken          string
	RefreshTokenExpiresAt time.Time
	UserID                uuid.UUID
}

type UpdateUserRefreshTokenRow struct {
	ID           uuid.UUID
	RefreshToken string
}

func (q *Queries) UpdateUserRefreshToken(ctx context.Context, arg UpdateUserRefreshTokenParams) (UpdateUserRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, updateUserRefreshToken, arg.RefreshToken, arg.RefreshTokenExpiresAt, arg.UserID)
	var i UpdateUserRefreshTokenRow
	err := row.Scan(&i.ID, &i.RefreshToken)
	return i, err
}
